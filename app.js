// Generated by CoffeeScript 1.6.2
(function() {
  var app, connections, express, io, mapdata, newUUID, refreshrate, server;

  express = require("express");

  app = express();

  server = require("http").createServer(app);

  io = require("socket.io").listen(server);

  server.listen(3001);

  io.enable("browser client minification");

  io.set("log level", 1);

  refreshrate = 10;

  connections = {};

  app.use(express["static"](__dirname + "/www"));

  newUUID = function() {
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
      var r, v;
      r = Math.random() * 16 | 0;
      v = (c === "x" ? r : r & 0x3 | 0x8);
      return v.toString(16);
    });
  };

  setInterval((function() {
    var i, j, n, syncobjs, _results;
    _results = [];
    for (i in connections) {
      if (connections.hasOwnProperty(i)) {
        syncobjs = {};
        for (n in connections) {
          if (connections.hasOwnProperty(n)) {
            if (n !== i) {
              for (j in connections[n].objects) {
                if (connections[n].objects.hasOwnProperty(j)) {
                  syncobjs[j] = connections[n].objects[j];
                }
              }
            }
          }
        }
        _results.push(connections[i].socket.emit("game_sync", JSON.stringify(syncobjs)));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  }), 1000 / refreshrate);

  mapdata = {
    bgImage: "img/background.jpg",
    mapImage: "img/testmap.png",
    dock: [[600, 305], [980, 135]],
    gravity: 0.0981,
    mapWidth: 1280,
    mapHeight: 1440,
    bgWidth: 640,
    bgHeight: 480
  };

  io.sockets.on("connection", function(socket) {
    socket.uuid = newUUID();
    connections[socket.uuid] = {
      socket: socket,
      objects: {},
      ready: false
    };
    socket.on("request_player_data", function() {
      var plr;
      plr = {
        nick: "player",
        uuid: socket.uuid,
        x: 400,
        y: 100,
        a: 0,
        dx: 0,
        dy: 0,
        da: 0,
        ddx: 0,
        ddy: 0,
        dda: 0,
        hp: 100,
        z: 0,
        height: 32,
        width: 32,
        imgfile: "img/small_ship.png",
        updated: new Date().getTime(),
        tag: "player"
      };
      connections[socket.uuid].objects[socket.uuid] = plr;
      socket.emit("player_data", JSON.stringify(plr));
      return console.log("Synced player data to " + socket.uuid);
    });
    socket.on("request_map_data", function() {
      return socket.emit("map_data", JSON.stringify(mapdata));
    });
    socket.on("loading_done", function() {
      connections[socket.uuid].ready = true;
      return console.log("Client " + socket.uuid + " is ready.");
    });
    socket.on("client_object_sync", function(data) {
      connections[socket.uuid].objects = JSON.parse(data);
      return connections[socket.uuid].updated = new Date().getTime();
    });
    console.log("UUID: " + socket.uuid + " connected.");
    return socket.on("disconnect", function() {
      io.sockets.emit("del_obj", {
        uuid: socket.uuid
      });
      delete connections[socket.uuid];
      return console.log("UUID: " + socket.uuid + " disconnected.");
    });
  });

}).call(this);
