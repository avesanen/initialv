// Generated by CoffeeScript 1.6.2
/*
# Main browser side program and most of the highest level game logic.
*/


(function() {
  define(function(require) {
    var bombShootTime, fps, keyboard, lastrefresh, map, network, particles, physics, scrolldiv, sfx, shootTime, sprites, that, thrusting;
    keyboard = require("./keyboard");
    network = require("./network");
    sfx = require("./sfx");
    map = require("./map");
    particles = require("./particles");
    sprites = require("./sprites");
    physics = require("./physics");
    /*
    # onCollision event that does nothing (null).
    */

    this.nullOnCollision = function(source, target, dt) {};
    /*
    # onCollision event for plasma clouds
    */

    this.plasmaOnCollision = function(source, target, dt) {
      var cloudSprite, cloudSprites, _i, _len;
      if (target.tag === "bullet") {
        cloudSprites = sprites.getNearbySprites(source.x, source.y, 120);
        for (_i = 0, _len = cloudSprites.length; _i < _len; _i++) {
          cloudSprite = cloudSprites[_i];
          if (cloudSprite.tag === "player") {
            cloudSprite.hp -= 50;
            sfx.playSfx("ship_hit");
          }
        }
        sfx.playSfx("explosion");
        particles.emitter(source.x, source.y, 50);
        map.createCrater(source.x, source.y, 70);
        sprites.removeSprite(target);
        return sprites.removeSprite(source);
      }
    };
    /*
    # onCollision event for bullets
    */

    this.bulletOnCollision = function(source, target, dt) {
      if (target.tag === "map") {
        map.createCrater(source.x, source.y, 16);
        sprites.removeSprite(source);
        return sfx.playSfx("ground_hit");
      }
    };
    /*
    # onCollision event for special bombs
    */

    this.bombOnCollision = function(source, target, dt) {
      var i, _i, _results;
      if (target.tag === "map" || target.tag === "player") {
        map.createCrater(source.x, source.y, 64);
        sprites.removeSprite(source);
        sfx.playSfx("bomb_explode");
        _results = [];
        for (i = _i = 0; _i <= 359; i = _i += 36) {
          _results.push(physics.createBullet(source.x, source.y, source.dx, source.dy, i, 0, sprites));
        }
        return _results;
      }
    };
    /*
    # onCollision event for docks
    */

    this.dockOnCollision = function(source, target, dt) {
      if (target.tag === "player") {
        return target.docked = true;
      }
    };
    /*
    # onCollision event for player's ship
    */

    this.playerOnCollision = function(source, target, dt) {
      var doDamage;
      doDamage = 0;
      if ((target.tag === "player") || (target.tag === "map")) {
        source.x -= source.dx * dt / 1000;
        source.y -= source.dy * dt / 1000;
        source.dx = 0;
        source.dy = 0;
        source.ddx = 0;
        source.ddy = 0;
        if (!source.docked) {
          particles.emitter(source.x, source.y, 10);
          sfx.playSfx("ship_hit");
          doDamage = 5;
        }
      } else if (target.tag === "bullet") {
        sprites.removeSprite(target);
        particles.emitter(source.x, source.y, 10);
        sfx.playSfx("ship_hit");
        doDamage = 20;
      }
      source.hp -= doDamage;
      if (source.hp <= 0 && source.hp > -1000 && doDamage > 0) {
        particles.emitter(source.x, source.y, 100);
        source.imgfile = "/img/small_ship_broken.png";
        sfx.playSfx("explosion");
        sfx.stopSfx("thruster");
        map.createCrater(source.x, source.y, 100);
        source.dy += 0.001;
        return source.hp = -1000;
      }
    };
    sprites.init("#spritecanvas");
    map.init("#mapcanvas", sprites);
    particles.init("#particlecanvas");
    sfx.init();
    scrolldiv = $("#scrolldiv")[0];
    network.init(sprites.localSprites, sprites.remoteSprites, map);
    physics.collisionEvents["plasma"] = this.plasmaOnCollision;
    physics.collisionEvents["hide"] = this.nullOnCollision;
    physics.collisionEvents["bullet"] = this.bulletOnCollision;
    physics.collisionEvents["dock"] = this.dockOnCollision;
    physics.collisionEvents["bomb"] = this.bombOnCollision;
    physics.collisionEvents["player"] = this.playerOnCollision;
    physics.collisionEvents[""] = this.nullOnCollision;
    shootTime = 0;
    bombShootTime = 0;
    thrusting = false;
    fps = 60;
    lastrefresh = new Date().getTime();
    that = this;
    return setInterval((function() {
      var bomb, bombCoords, dt, kick, now, player, statusHealth;
      now = new Date().getTime();
      dt = now - lastrefresh;
      lastrefresh = now;
      player = sprites.localSprites[network.playerUuid];
      if (typeof player !== "undefined" && player.hp > 0) {
        if (keyboard.keyDown(37)) {
          player.da = -220;
        } else if (keyboard.keyDown(39)) {
          player.da = 220;
        } else {
          player.da = 0;
        }
      }
      if (typeof player !== "undefined" && keyboard.keyDown(38) && player.hp > 0) {
        physics.accelerateSprite(player, 350);
        particles.emit(player.x, player.y, player.a - 185 + Math.random() * 10, 100, Math.random() * 100 + 1000);
        if (!thrusting) {
          sfx.playSfx("thruster");
          thrusting = true;
        }
      } else {
        if (thrusting) {
          physics.accelerateSprite(player, 0);
          thrusting = false;
          sfx.stopSfx("thruster");
        }
      }
      if (typeof player !== "undefined") {
        if (player.x + 320 > 1280) {
          scrolldiv.style.left = "-" + (1280 - 640) + "px";
        } else {
          scrolldiv.style.left = "-" + (player.x - 320) + "px";
        }
        if (player.y + 240 > 1440) {
          scrolldiv.style.top = "-" + (1440 - 480) + "px";
        } else {
          scrolldiv.style.top = "-" + (player.y - 240) + "px";
        }
      }
      if (typeof player !== "undefined" && keyboard.keyDown(32) && (shootTime >= 500) && (player.hp > 0)) {
        shootTime = 0;
        sfx.playSfx("laser");
        physics.createBullet(player.x, player.y, player.dx, player.dy, player.a, player.height, sprites);
      }
      shootTime += dt;
      if (typeof player !== "undefined" && keyboard.keyDown(40) && (bombShootTime >= 3000) && (player.hp > 0)) {
        sfx.playSfx("bomb_shoot");
        bombCoords = physics.coordFromAngleDistance(player.x, player.y, player.a, player.height + 8);
        bomb = sprites.newSprite("img/bomb.png", 16, 16, bombCoords[0], bombCoords[1], player.a, 150, "bomb", 0);
        bomb.dx += player.dx;
        bomb.dy += player.dy;
        kick = physics.coordFromAngleDistance(0, 0, -player.a, 200);
        player.dx += kick[0];
        player.dy -= kick[1];
        bombShootTime = 0;
      }
      bombShootTime += dt;
      physics.doGravity(map, sprites, dt);
      particles.refresh(dt);
      particles.reDraw();
      sprites.refresh(dt);
      physics.checkMapCollision(map, sprites, dt);
      if (typeof player !== "undefined") {
        player.docked = false;
      }
      physics.checkSpriteCollision(sprites, dt);
      sprites.reDraw();
      if (typeof player !== "undefined" && player.docked && player.hp > 0 && player.hp < 100) {
        player.hp += dt * 0.005;
      }
      if (typeof player !== "undefined") {
        statusHealth = Math.round(player.hp);
        if (statusHealth < 0) {
          statusHealth = 0;
        }
        return $("div#statusdiv").text("Integrity: " + statusHealth + "%");
      }
    }), 1000 / fps);
  });

}).call(this);
