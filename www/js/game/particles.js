// Generated by CoffeeScript 1.6.2
/*
# Particle controller. Creates to the game view animated particles like
# rocket engine exhaust or an explosion.
#
# Usage:
# var particles = require('./particles');
# particles.init('#particlecanvas');
*/


(function() {
  define(["jquery", "exports"], function($, exports) {
    var Particle, canvas, ctx, lerp, lerpA, particles, toCss;
    canvas = null;
    ctx = null;
    /*
    # Initialize canvas with the given ID.
    # @param canvasid ID of the canvas to init.
    */

    exports.init = function(canvasid) {
      canvas = $(canvasid)[0];
      return ctx = canvas.getContext("2d");
    };
    /*
    # Calculate CSS color string
    # @param A
    */

    toCss = function(A) {
      var i;
      i = 0;
      while (i < 3) {
        A[i] = Math.round(A[i]);
        i++;
      }
      A[3] /= 255;
      return "rgba(" + A.join() + ")";
    };
    /*
    # Helper math function
    */

    lerp = function(p, a, b) {
      return Number(a) + (b - a) * p;
    };
    /*
    # Helper math function
    */

    lerpA = function(p, A, B) {
      var i, res;
      res = [];
      i = 0;
      while (i < A.length) {
        res[i] = lerp(p, A[i], B[i]);
        i++;
      }
      return res;
    };
    particles = [];
    /*
    # Create new particle object instance
    # @param x
    # @param y
    # @param angle
    # @param speed
    # @param life How long the particle exists
    */

    Particle = function(x, y, angle, speed, life) {
      this.x = x;
      this.y = y;
      this.startspeed = speed;
      this.endspeed = speed / 10;
      this.startangle = angle;
      this.endangle = angle + Math.random() * 360 - 180;
      this.life = life;
      this.startlife = this.life;
      this.size = 1;
      this.startsize = this.size;
      this.endsize = this.size + 40;
      this.color = [255, 255, 255, 128];
      this.startcolor = this.color;
      return this.endcolor = [0, 0, 0, 0.1];
    };
    /*
    # Move particle
    # @param dt time delta
    */

    Particle.prototype.refresh = function(dt) {
      var angle, speed;
      this.life -= dt;
      speed = lerp(this.life / this.startlife, this.endspeed, this.startspeed);
      angle = lerp(this.life / this.startlife, this.endangle, this.startangle);
      this.x += speed * Math.sin(angle * Math.PI / 180) * dt / 1000;
      this.y += -speed * Math.cos(angle * Math.PI / 180) * dt / 1000;
      this.size = lerp(this.life / this.startlife, this.endsize, this.startsize);
      return this.color = lerpA(this.life / this.startlife, this.endcolor, this.startcolor);
    };
    /*
    # Draw particle
    */

    Particle.prototype.draw = function() {
      ctx.fillStyle = toCss(this.color);
      ctx.beginPath();
      ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, true);
      ctx.closePath();
      return ctx.fill();
    };
    /*
    # Particle emitter.
    # @param x X coordinate
    # @param y Y coordinate
    # @param amount Amount of particles to be emitted
    */

    exports.emitter = function(x, y, amount) {
      exports.emit(x, y, Math.random() * 360, 40, 1000);
      return setTimeout((function() {
        if (this.attached) {
          console.log("Attached!");
          this.x = this.attached.x;
          this.y = this.attached.y;
        }
        if (amount > 0) {
          amount -= 1;
          return exports.emitter(x, y, amount);
        }
      }), 1000 / 30);
    };
    exports.emitter.prototype.attachTo = function(spr) {
      return this.attached = spr;
    };
    /*
    # Emit a particle.
    # @param x X-coordinate
    # @param y Y-coordinate
    # @param angle Angle
    # @param speed Speed in pixels/ms
    # @param life Life duration in ms
    */

    exports.emit = function(x, y, angle, speed, life) {
      return particles.push(new Particle(x, y, angle, speed, life));
    };
    /*
    # Refresh particle positions and life with delta time.
    # @param dt Delta time
    */

    exports.refresh = function(dt) {
      var i, _i, _ref, _results;
      if (particles.length > 0) {
        _results = [];
        for (i = _i = 0, _ref = particles.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (particles[i].life > 0) {
            _results.push(particles[i].refresh(dt));
          } else {
            _results.push(particles.splice(i, 1));
          }
        }
        return _results;
      }
    };
    /*
    # Draw particles.
    */

    exports.reDraw = function() {
      var i, _i, _ref, _results;
      canvas.width = canvas.width;
      if (particles.length > 0) {
        _results = [];
        for (i = _i = 0, _ref = particles.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          if (particles[i].life > 0) {
            _results.push(particles[i].draw());
          } else {
            _results.push(particles.splice(i, 1));
          }
        }
        return _results;
      }
    };
  });

}).call(this);
